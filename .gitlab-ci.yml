image: docker:latest

services:
  - postgres:latest
  - docker:dind

variables:
  POSTGRES_HOST: postgres
  POSTGRES_DB: postgres_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: example
  REGISTRY_URL: registry.gitlab.com/feup-tbs/ldso18-19/t3g2


stages:
  - build
  - test
  - release
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - api/node_modules/
  - web/node_modules/
  - mobile/node_modules/

build_api:
  image: node:latest
  stage: build
  
  script:
    - cd api
    - npm install
  tags:
    - docker, postgres

build_web:
  image: node:latest
  stage: build
  script:
    - cd web
    - npm install
  tags:
    - docker, postgres

build_mobile:
  image: node:latest
  stage: build
  script:
    - cd mobile
    - npm install

test_api:
  image: node:latest
  stage: test
  variables:
    NODE_ENV: test
  services: 
    - postgres:latest  
  script:
    - cd api
    - npm install --save passport
    - npm install --save-dev eslint
<<<<<<< HEAD
=======
    - npm install --save oas-tools
>>>>>>> dev
    - npm test
    - npm run lint
  tags:
    - docker, postgres

test_web:
  image: node:latest
  stage: test
  variables:
    NODE_ENV: test
  script:
    - cd web
    - npm install --save-dev jest eslint eslint-plugin-react
    - npm test -- -u
    - npm run lint
  tags:
    - docker, postgres

test_mobile:
  image: node:latest
  stage: test
  variables:
    NODE_ENV: test
  script:
    - cd mobile
<<<<<<< HEAD
    - npm install --save-dev jest eslint eslint-plugin-react eslint-plugin-react-native babel-eslint
=======
    - npm install --save-dev jest eslint eslint-plugin-react eslint-plugin-react-native babel-eslint jest-expo
>>>>>>> dev
    - npm test -- -u
    - npm run lint
  tags:
    - docker, postgres

release_api:
  image: docker:stable
  stage: release
  only:
    - dev
  before_script:
    - cd api
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $REGISTRY_URL/api:$CI_COMMIT_REF_NAME .
    - docker push $REGISTRY_URL/api:$CI_COMMIT_REF_NAME
  after_script:
    - "docker logout ${CI_REGISTRY}"

release_web_staging:
  image: docker:stable
  stage: release
  only:
    - dev
  before_script:
    - cd web
    - echo "REACT_APP_API_URL=$DEPLOYMENT_SERVER_STAGING_IP" > .env
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $REGISTRY_URL/web:$CI_COMMIT_REF_NAME .
    - docker push $REGISTRY_URL/web:$CI_COMMIT_REF_NAME
  after_script:
    - "docker logout ${CI_REGISTRY}"

release_web_production:
  image: docker:stable
  stage: release
  only:
    - master
  before_script:
    - cd web
    - echo "REACT_APP_API_URL=$DEPLOYMENT_SERVER_PRODUCTION_IP" > .env
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $REGISTRY_URL/web:$CI_COMMIT_REF_NAME .
    - docker push $REGISTRY_URL/web:$CI_COMMIT_REF_NAME
  after_script:
    - "docker logout ${CI_REGISTRY}"

release_mobile:
  image: docker:stable
  stage: release
  only:
    - dev
  before_script:
    - cd web
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - docker build -t $REGISTRY_URL/mobile:$CI_COMMIT_REF_NAME .
    - docker push $REGISTRY_URL/mobile:$CI_COMMIT_REF_NAME
  after_script:
    - "docker logout ${CI_REGISTRY}"

deploy_staging:
  stage: deploy
  image: gitlab/dind:latest
  only:
    - dev
  environment: staging
  before_script:
    - apt-get update -y && apt-get install sshpass -y
  script:
    - sshpass -p "${STAGING_SERVER_SSH_PASS}" ssh -o StrictHostKeyChecking=no root@${DEPLOYMENT_SERVER_STAGING_IP} "sh /root/home/deploy.sh"

deploy_production:
  stage: deploy
  image: gitlab/dind:latest
  only:
    - master
  environment: production
  before_script:
    - apt-get update -y && apt-get install sshpass -y
  script:
    - sshpass -p "${PRODUCTION_SERVER_SSH_PASS}" ssh -o StrictHostKeyChecking=no root@${DEPLOYMENT_SERVER_PRODUCTION_IP} "sh /root/home/deploy.sh"