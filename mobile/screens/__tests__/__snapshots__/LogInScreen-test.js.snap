// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App snapshot renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LogInScreen />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <StatusBar
          animated={false}
          hidden={true}
          showHideTransition="fade"
        />,
        <Component
          style={
            Object {
              "alignItems": "center",
              "flexDirection": "column",
              "height": "99%",
            }
          }
        >
          <Component
            style={
              Object {
                "flex": 2,
              }
            }
          />
          <Image
            resizeMode="contain"
            source={1}
            style={
              Object {
                "flex": 3,
              }
            }
          />
          <Component
            style={
              Object {
                "flex": 1,
                "paddingTop": "10%",
                "width": "60%",
              }
            }
          >
            <Styled(Button)
              className="login_button"
              iconLeft={true}
              light={true}
              onPress={[Function]}
            >
              <Image
                resizeMode="contain"
                source={1}
                style={
                  Object {
                    "flex": 1,
                    "height": "75%",
                  }
                }
              />
              <Styled(Text)
                style={
                  Object {
                    "color": "#696969",
                    "flex": 4,
                  }
                }
              />
            </Styled(Button)>
          </Component>
          <Component
            style={
              Object {
                "flex": 1,
              }
            }
          />
        </Component>,
      ],
      "style": Object {
        "backgroundColor": "#292929",
        "height": "100%",
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "animated": false,
          "hidden": true,
          "showHideTransition": "fade",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Component
              style={
                Object {
                  "flex": 2,
                }
              }
            />,
            <Image
              resizeMode="contain"
              source={1}
              style={
                Object {
                  "flex": 3,
                }
              }
            />,
            <Component
              style={
                Object {
                  "flex": 1,
                  "paddingTop": "10%",
                  "width": "60%",
                }
              }
            >
              <Styled(Button)
                className="login_button"
                iconLeft={true}
                light={true}
                onPress={[Function]}
              >
                <Image
                  resizeMode="contain"
                  source={1}
                  style={
                    Object {
                      "flex": 1,
                      "height": "75%",
                    }
                  }
                />
                <Styled(Text)
                  style={
                    Object {
                      "color": "#696969",
                      "flex": 4,
                    }
                  }
                />
              </Styled(Button)>
            </Component>,
            <Component
              style={
                Object {
                  "flex": 1,
                }
              }
            />,
          ],
          "style": Object {
            "alignItems": "center",
            "flexDirection": "column",
            "height": "99%",
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "style": Object {
                "flex": 2,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "resizeMode": "contain",
              "source": 1,
              "style": Object {
                "flex": 3,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Button)
                className="login_button"
                iconLeft={true}
                light={true}
                onPress={[Function]}
              >
                <Image
                  resizeMode="contain"
                  source={1}
                  style={
                    Object {
                      "flex": 1,
                      "height": "75%",
                    }
                  }
                />
                <Styled(Text)
                  style={
                    Object {
                      "color": "#696969",
                      "flex": 4,
                    }
                  }
                />
              </Styled(Button)>,
              "style": Object {
                "flex": 1,
                "paddingTop": "10%",
                "width": "60%",
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <Image
                    resizeMode="contain"
                    source={1}
                    style={
                      Object {
                        "flex": 1,
                        "height": "75%",
                      }
                    }
                  />,
                  <Styled(Text)
                    style={
                      Object {
                        "color": "#696969",
                        "flex": 4,
                      }
                    }
                  />,
                ],
                "className": "login_button",
                "iconLeft": true,
                "light": true,
                "onPress": [Function],
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "resizeMode": "contain",
                    "source": 1,
                    "style": Object {
                      "flex": 1,
                      "height": "75%",
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": undefined,
                    "style": Object {
                      "color": "#696969",
                      "flex": 4,
                    },
                    "virtual": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": undefined,
              "style": Object {
                "flex": 1,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <StatusBar
            animated={false}
            hidden={true}
            showHideTransition="fade"
          />,
          <Component
            style={
              Object {
                "alignItems": "center",
                "flexDirection": "column",
                "height": "99%",
              }
            }
          >
            <Component
              style={
                Object {
                  "flex": 2,
                }
              }
            />
            <Image
              resizeMode="contain"
              source={1}
              style={
                Object {
                  "flex": 3,
                }
              }
            />
            <Component
              style={
                Object {
                  "flex": 1,
                  "paddingTop": "10%",
                  "width": "60%",
                }
              }
            >
              <Styled(Button)
                className="login_button"
                iconLeft={true}
                light={true}
                onPress={[Function]}
              >
                <Image
                  resizeMode="contain"
                  source={1}
                  style={
                    Object {
                      "flex": 1,
                      "height": "75%",
                    }
                  }
                />
                <Styled(Text)
                  style={
                    Object {
                      "color": "#696969",
                      "flex": 4,
                    }
                  }
                />
              </Styled(Button)>
            </Component>
            <Component
              style={
                Object {
                  "flex": 1,
                }
              }
            />
          </Component>,
        ],
        "style": Object {
          "backgroundColor": "#292929",
          "height": "100%",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "animated": false,
            "hidden": true,
            "showHideTransition": "fade",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Component
                style={
                  Object {
                    "flex": 2,
                  }
                }
              />,
              <Image
                resizeMode="contain"
                source={1}
                style={
                  Object {
                    "flex": 3,
                  }
                }
              />,
              <Component
                style={
                  Object {
                    "flex": 1,
                    "paddingTop": "10%",
                    "width": "60%",
                  }
                }
              >
                <Styled(Button)
                  className="login_button"
                  iconLeft={true}
                  light={true}
                  onPress={[Function]}
                >
                  <Image
                    resizeMode="contain"
                    source={1}
                    style={
                      Object {
                        "flex": 1,
                        "height": "75%",
                      }
                    }
                  />
                  <Styled(Text)
                    style={
                      Object {
                        "color": "#696969",
                        "flex": 4,
                      }
                    }
                  />
                </Styled(Button)>
              </Component>,
              <Component
                style={
                  Object {
                    "flex": 1,
                  }
                }
              />,
            ],
            "style": Object {
              "alignItems": "center",
              "flexDirection": "column",
              "height": "99%",
            },
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "style": Object {
                  "flex": 2,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "resizeMode": "contain",
                "source": 1,
                "style": Object {
                  "flex": 3,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Button)
                  className="login_button"
                  iconLeft={true}
                  light={true}
                  onPress={[Function]}
                >
                  <Image
                    resizeMode="contain"
                    source={1}
                    style={
                      Object {
                        "flex": 1,
                        "height": "75%",
                      }
                    }
                  />
                  <Styled(Text)
                    style={
                      Object {
                        "color": "#696969",
                        "flex": 4,
                      }
                    }
                  />
                </Styled(Button)>,
                "style": Object {
                  "flex": 1,
                  "paddingTop": "10%",
                  "width": "60%",
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Image
                      resizeMode="contain"
                      source={1}
                      style={
                        Object {
                          "flex": 1,
                          "height": "75%",
                        }
                      }
                    />,
                    <Styled(Text)
                      style={
                        Object {
                          "color": "#696969",
                          "flex": 4,
                        }
                      }
                    />,
                  ],
                  "className": "login_button",
                  "iconLeft": true,
                  "light": true,
                  "onPress": [Function],
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "resizeMode": "contain",
                      "source": 1,
                      "style": Object {
                        "flex": 1,
                        "height": "75%",
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": undefined,
                      "style": Object {
                        "color": "#696969",
                        "flex": 4,
                      },
                      "virtual": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": undefined,
                "style": Object {
                  "flex": 1,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`App snapshot renders loading 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LogInScreen />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <AppLoading />,
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <AppLoading />,
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
